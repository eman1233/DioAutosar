
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002852  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00002852  000028c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002370  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001119  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000080d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000091d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ae28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 23 13 	call	0x2646	; 0x2646 <main>
      7a:	0c 94 27 14 	jmp	0x284e	; 0x284e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <Det_ReportError>:
extern const Dio_ChannelStatus  ChannelStatus [TOTAL_PINS];

extern const Dio_LevelType  ChannelLevel [TOTAL_PINS];

Std_ReturnType Det_ReportError(u16 moduleId,u8 instanceId,u8 ApiId,u8 ErrorId)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <Det_ReportError+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Det_ReportError+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	6b 83       	std	Y+3, r22	; 0x03
     ca2:	4c 83       	std	Y+4, r20	; 0x04
     ca4:	2d 83       	std	Y+5, r18	; 0x05
	return E_OK ;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <Dio_ReadChannel>:

Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <Dio_ReadChannel+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <Dio_ReadChannel+0x8>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <Dio_ReadChannel+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	8c 83       	std	Y+4, r24	; 0x04
	Dio_LevelType Level;
	Dio_PortType PortId;
	PortId = ChannelId/NumOfPort;
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	86 95       	lsr	r24
     ccc:	86 95       	lsr	r24
     cce:	86 95       	lsr	r24
     cd0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Pin_num = ChannelId % NumOfPort ;
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	87 70       	andi	r24, 0x07	; 7
     cd6:	89 83       	std	Y+1, r24	; 0x01
#ifdef DioDevErrorDetect==STD_OK
	if(ChannelId>TOTAL_PINS)
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	81 32       	cpi	r24, 0x21	; 33
     cdc:	38 f0       	brcs	.+14     	; 0xcec <Dio_ReadChannel+0x34>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_ReadChannel_API,DIO_E_PARAM_INVALID_CHANNEL_ID);
     cde:	88 e7       	ldi	r24, 0x78	; 120
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	2a e0       	ldi	r18, 0x0A	; 10
     ce8:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
	switch(PortId)
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3e 83       	std	Y+6, r19	; 0x06
     cf4:	2d 83       	std	Y+5, r18	; 0x05
     cf6:	4d 81       	ldd	r20, Y+5	; 0x05
     cf8:	5e 81       	ldd	r21, Y+6	; 0x06
     cfa:	41 30       	cpi	r20, 0x01	; 1
     cfc:	51 05       	cpc	r21, r1
     cfe:	79 f1       	breq	.+94     	; 0xd5e <Dio_ReadChannel+0xa6>
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	91 05       	cpc	r25, r1
     d08:	34 f4       	brge	.+12     	; 0xd16 <Dio_ReadChannel+0x5e>
     d0a:	2d 81       	ldd	r18, Y+5	; 0x05
     d0c:	3e 81       	ldd	r19, Y+6	; 0x06
     d0e:	21 15       	cp	r18, r1
     d10:	31 05       	cpc	r19, r1
     d12:	69 f0       	breq	.+26     	; 0xd2e <Dio_ReadChannel+0x76>
     d14:	6b c0       	rjmp	.+214    	; 0xdec <Dio_ReadChannel+0x134>
     d16:	4d 81       	ldd	r20, Y+5	; 0x05
     d18:	5e 81       	ldd	r21, Y+6	; 0x06
     d1a:	42 30       	cpi	r20, 0x02	; 2
     d1c:	51 05       	cpc	r21, r1
     d1e:	b9 f1       	breq	.+110    	; 0xd8e <Dio_ReadChannel+0xd6>
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	83 30       	cpi	r24, 0x03	; 3
     d26:	91 05       	cpc	r25, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <Dio_ReadChannel+0x74>
     d2a:	49 c0       	rjmp	.+146    	; 0xdbe <Dio_ReadChannel+0x106>
     d2c:	5f c0       	rjmp	.+190    	; 0xdec <Dio_ReadChannel+0x134>
	{
	case PA :
		if(READ_BIT(PINA_REG ,Pin_num)==STD_LOW )
     d2e:	e9 e3       	ldi	r30, 0x39	; 57
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a9 01       	movw	r20, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <Dio_ReadChannel+0x8e>
     d42:	55 95       	asr	r21
     d44:	47 95       	ror	r20
     d46:	8a 95       	dec	r24
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <Dio_ReadChannel+0x8a>
     d4a:	ca 01       	movw	r24, r20
     d4c:	81 70       	andi	r24, 0x01	; 1
     d4e:	90 70       	andi	r25, 0x00	; 0
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	11 f4       	brne	.+4      	; 0xd58 <Dio_ReadChannel+0xa0>
		{
			Level=STD_LOW;
     d54:	1b 82       	std	Y+3, r1	; 0x03
     d56:	4a c0       	rjmp	.+148    	; 0xdec <Dio_ReadChannel+0x134>
		}
		else
		{
			Level=STD_HIGH;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	8b 83       	std	Y+3, r24	; 0x03
     d5c:	47 c0       	rjmp	.+142    	; 0xdec <Dio_ReadChannel+0x134>
		}
		break;
	case PB :
		if(READ_BIT(PINB_REG ,Pin_num)==STD_LOW )
     d5e:	e6 e3       	ldi	r30, 0x36	; 54
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	a9 01       	movw	r20, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <Dio_ReadChannel+0xbe>
     d72:	55 95       	asr	r21
     d74:	47 95       	ror	r20
     d76:	8a 95       	dec	r24
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <Dio_ReadChannel+0xba>
     d7a:	ca 01       	movw	r24, r20
     d7c:	81 70       	andi	r24, 0x01	; 1
     d7e:	90 70       	andi	r25, 0x00	; 0
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	11 f4       	brne	.+4      	; 0xd88 <Dio_ReadChannel+0xd0>
		{
			Level=STD_LOW;
     d84:	1b 82       	std	Y+3, r1	; 0x03
     d86:	32 c0       	rjmp	.+100    	; 0xdec <Dio_ReadChannel+0x134>
		}
		else
		{
			Level=STD_HIGH;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	8b 83       	std	Y+3, r24	; 0x03
     d8c:	2f c0       	rjmp	.+94     	; 0xdec <Dio_ReadChannel+0x134>
		}
		break;
	case PC :
		if(READ_BIT(PINC_REG ,Pin_num)==STD_LOW )
     d8e:	e3 e3       	ldi	r30, 0x33	; 51
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <Dio_ReadChannel+0xee>
     da2:	55 95       	asr	r21
     da4:	47 95       	ror	r20
     da6:	8a 95       	dec	r24
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <Dio_ReadChannel+0xea>
     daa:	ca 01       	movw	r24, r20
     dac:	81 70       	andi	r24, 0x01	; 1
     dae:	90 70       	andi	r25, 0x00	; 0
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	11 f4       	brne	.+4      	; 0xdb8 <Dio_ReadChannel+0x100>
		{
			Level=STD_LOW;
     db4:	1b 82       	std	Y+3, r1	; 0x03
     db6:	1a c0       	rjmp	.+52     	; 0xdec <Dio_ReadChannel+0x134>
		}
		else
		{
			Level=STD_HIGH;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	8b 83       	std	Y+3, r24	; 0x03
     dbc:	17 c0       	rjmp	.+46     	; 0xdec <Dio_ReadChannel+0x134>
		}
		break;

	case PD :
		if(READ_BIT(PIND_REG ,Pin_num)==STD_LOW )
     dbe:	e0 e3       	ldi	r30, 0x30	; 48
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <Dio_ReadChannel+0x11e>
     dd2:	55 95       	asr	r21
     dd4:	47 95       	ror	r20
     dd6:	8a 95       	dec	r24
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <Dio_ReadChannel+0x11a>
     dda:	ca 01       	movw	r24, r20
     ddc:	81 70       	andi	r24, 0x01	; 1
     dde:	90 70       	andi	r25, 0x00	; 0
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	11 f4       	brne	.+4      	; 0xde8 <Dio_ReadChannel+0x130>
		{
			Level=STD_LOW;
     de4:	1b 82       	std	Y+3, r1	; 0x03
     de6:	02 c0       	rjmp	.+4      	; 0xdec <Dio_ReadChannel+0x134>
		}
		else
		{
			Level=STD_HIGH;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	8b 83       	std	Y+3, r24	; 0x03
		break;

	}


	return Level;
     dec:	8b 81       	ldd	r24, Y+3	; 0x03

}
     dee:	26 96       	adiw	r28, 0x06	; 6
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <Dio_WriteChannel>:

void Dio_WriteChannel(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <Dio_WriteChannel+0x6>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <Dio_WriteChannel+0x8>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <Dio_WriteChannel+0xa>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8b 83       	std	Y+3, r24	; 0x03
     e10:	6c 83       	std	Y+4, r22	; 0x04
	Dio_PortType PortId;
	PortId = ChannelId/NumOfPort;
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	86 95       	lsr	r24
     e16:	86 95       	lsr	r24
     e18:	86 95       	lsr	r24
     e1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Pin_num = ChannelId %NumOfPort ;
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	87 70       	andi	r24, 0x07	; 7
     e20:	89 83       	std	Y+1, r24	; 0x01
#ifdef DioDevErrorDetect==STD_OK
	if(ChannelId>TOTAL_PINS)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	81 32       	cpi	r24, 0x21	; 33
     e26:	38 f0       	brcs	.+14     	; 0xe36 <Dio_WriteChannel+0x36>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_WriteChannel_API,DIO_E_PARAM_INVALID_CHANNEL_ID);
     e28:	88 e7       	ldi	r24, 0x78	; 120
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	2a e0       	ldi	r18, 0x0A	; 10
     e32:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
	switch (PortId)
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	3e 83       	std	Y+6, r19	; 0x06
     e3e:	2d 83       	std	Y+5, r18	; 0x05
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <Dio_WriteChannel+0x4c>
     e4a:	47 c0       	rjmp	.+142    	; 0xeda <Dio_WriteChannel+0xda>
     e4c:	2d 81       	ldd	r18, Y+5	; 0x05
     e4e:	3e 81       	ldd	r19, Y+6	; 0x06
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	31 05       	cpc	r19, r1
     e54:	2c f4       	brge	.+10     	; 0xe60 <Dio_WriteChannel+0x60>
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	71 f0       	breq	.+28     	; 0xe7a <Dio_WriteChannel+0x7a>
     e5e:	cb c0       	rjmp	.+406    	; 0xff6 <Dio_WriteChannel+0x1f6>
     e60:	2d 81       	ldd	r18, Y+5	; 0x05
     e62:	3e 81       	ldd	r19, Y+6	; 0x06
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <Dio_WriteChannel+0x6c>
     e6a:	67 c0       	rjmp	.+206    	; 0xf3a <Dio_WriteChannel+0x13a>
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <Dio_WriteChannel+0x78>
     e76:	91 c0       	rjmp	.+290    	; 0xf9a <Dio_WriteChannel+0x19a>
     e78:	be c0       	rjmp	.+380    	; 0xff6 <Dio_WriteChannel+0x1f6>
	{
	case PA:
		if(Level==STD_HIGH)
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	a1 f4       	brne	.+40     	; 0xea8 <Dio_WriteChannel+0xa8>
		{
			SET_BIT(PORTA_REG,Pin_num);
     e80:	ab e3       	ldi	r26, 0x3B	; 59
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <Dio_WriteChannel+0x9e>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <Dio_WriteChannel+0x9a>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	a7 c0       	rjmp	.+334    	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		else if(Level==STD_LOW)
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	88 23       	and	r24, r24
     eac:	09 f0       	breq	.+2      	; 0xeb0 <Dio_WriteChannel+0xb0>
     eae:	a3 c0       	rjmp	.+326    	; 0xff6 <Dio_WriteChannel+0x1f6>
		{
			CLEAR_BIT(PORTA_REG,Pin_num);
     eb0:	ab e3       	ldi	r26, 0x3B	; 59
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	eb e3       	ldi	r30, 0x3B	; 59
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <Dio_WriteChannel+0xce>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <Dio_WriteChannel+0xca>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	8e c0       	rjmp	.+284    	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		break;

	case PB:
		if(Level==STD_HIGH)
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	a1 f4       	brne	.+40     	; 0xf08 <Dio_WriteChannel+0x108>
		{
			SET_BIT(PORTB_REG,Pin_num);
     ee0:	a8 e3       	ldi	r26, 0x38	; 56
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e8 e3       	ldi	r30, 0x38	; 56
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <Dio_WriteChannel+0xfe>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <Dio_WriteChannel+0xfa>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	77 c0       	rjmp	.+238    	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		else if(Level==STD_LOW)
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <Dio_WriteChannel+0x110>
     f0e:	73 c0       	rjmp	.+230    	; 0xff6 <Dio_WriteChannel+0x1f6>
		{
			CLEAR_BIT(PORTB_REG,Pin_num);
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <Dio_WriteChannel+0x12e>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <Dio_WriteChannel+0x12a>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	5e c0       	rjmp	.+188    	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		break;
	case PC:
		if(Level==STD_HIGH)
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <Dio_WriteChannel+0x168>
		{
			SET_BIT(PORTC_REG,Pin_num);
     f40:	a5 e3       	ldi	r26, 0x35	; 53
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e3       	ldi	r30, 0x35	; 53
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <Dio_WriteChannel+0x15e>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <Dio_WriteChannel+0x15a>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	47 c0       	rjmp	.+142    	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		else if(Level==STD_LOW)
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <Dio_WriteChannel+0x170>
     f6e:	43 c0       	rjmp	.+134    	; 0xff6 <Dio_WriteChannel+0x1f6>
		{
			CLEAR_BIT(PORTC_REG,Pin_num);
     f70:	a5 e3       	ldi	r26, 0x35	; 53
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <Dio_WriteChannel+0x18e>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <Dio_WriteChannel+0x18a>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	2e c0       	rjmp	.+92     	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		break;
	case PD:
		if(Level==STD_HIGH)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <Dio_WriteChannel+0x1c8>
		{
			SET_BIT(PORTD_REG,Pin_num);
     fa0:	a2 e3       	ldi	r26, 0x32	; 50
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e2 e3       	ldi	r30, 0x32	; 50
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <Dio_WriteChannel+0x1be>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <Dio_WriteChannel+0x1ba>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	17 c0       	rjmp	.+46     	; 0xff6 <Dio_WriteChannel+0x1f6>
		}
		else if(Level==STD_LOW)
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	88 23       	and	r24, r24
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <Dio_WriteChannel+0x1f6>
		{
			CLEAR_BIT(PORTD_REG,Pin_num);
     fce:	a2 e3       	ldi	r26, 0x32	; 50
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <Dio_WriteChannel+0x1ec>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <Dio_WriteChannel+0x1e8>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
		}
		break;

	}
}
     ff6:	26 96       	adiw	r28, 0x06	; 6
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <Dio_WriteDirectionChannel>:

void Dio_WriteDirectionChannel(Dio_ChannelType ChannelId,Dio_ChannelStatus Status)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <Dio_WriteDirectionChannel+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <Dio_WriteDirectionChannel+0x8>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <Dio_WriteDirectionChannel+0xa>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8b 83       	std	Y+3, r24	; 0x03
    1018:	6c 83       	std	Y+4, r22	; 0x04
	Dio_PortType PortId;
	PortId = ChannelId/NumOfPort;
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	86 95       	lsr	r24
    101e:	86 95       	lsr	r24
    1020:	86 95       	lsr	r24
    1022:	8a 83       	std	Y+2, r24	; 0x02
	u8 Pin_num = ChannelId % NumOfPort ;
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	89 83       	std	Y+1, r24	; 0x01
#ifdef DioDevErrorDetect==STD_OK
	if(ChannelId>=TOTAL_PINS)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	80 32       	cpi	r24, 0x20	; 32
    102e:	38 f0       	brcs	.+14     	; 0x103e <Dio_WriteDirectionChannel+0x36>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_WriteDirctionChannel_API,DIO_E_PARAM_INVALID_CHANNEL_ID);
    1030:	88 e7       	ldi	r24, 0x78	; 120
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	46 e0       	ldi	r20, 0x06	; 6
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
	switch (PortId)
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3e 83       	std	Y+6, r19	; 0x06
    1046:	2d 83       	std	Y+5, r18	; 0x05
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <Dio_WriteDirectionChannel+0x4c>
    1052:	47 c0       	rjmp	.+142    	; 0x10e2 <Dio_WriteDirectionChannel+0xda>
    1054:	2d 81       	ldd	r18, Y+5	; 0x05
    1056:	3e 81       	ldd	r19, Y+6	; 0x06
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	2c f4       	brge	.+10     	; 0x1068 <Dio_WriteDirectionChannel+0x60>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	71 f0       	breq	.+28     	; 0x1082 <Dio_WriteDirectionChannel+0x7a>
    1066:	cb c0       	rjmp	.+406    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
    1068:	2d 81       	ldd	r18, Y+5	; 0x05
    106a:	3e 81       	ldd	r19, Y+6	; 0x06
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <Dio_WriteDirectionChannel+0x6c>
    1072:	67 c0       	rjmp	.+206    	; 0x1142 <Dio_WriteDirectionChannel+0x13a>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <Dio_WriteDirectionChannel+0x78>
    107e:	91 c0       	rjmp	.+290    	; 0x11a2 <Dio_WriteDirectionChannel+0x19a>
    1080:	be c0       	rjmp	.+380    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
	{
	case PA:
		if(Status==OUTPUT)
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	a1 f4       	brne	.+40     	; 0x10b0 <Dio_WriteDirectionChannel+0xa8>
		{
			SET_BIT(DDRA_REG,Pin_num);
    1088:	aa e3       	ldi	r26, 0x3A	; 58
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ea e3       	ldi	r30, 0x3A	; 58
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <Dio_WriteDirectionChannel+0x9e>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <Dio_WriteDirectionChannel+0x9a>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	a7 c0       	rjmp	.+334    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		else if(Status==INPUT)
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	88 23       	and	r24, r24
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <Dio_WriteDirectionChannel+0xb0>
    10b6:	a3 c0       	rjmp	.+326    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		{
			CLEAR_BIT(DDRA_REG,Pin_num);
    10b8:	aa e3       	ldi	r26, 0x3A	; 58
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ea e3       	ldi	r30, 0x3A	; 58
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Dio_WriteDirectionChannel+0xce>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <Dio_WriteDirectionChannel+0xca>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	8e c0       	rjmp	.+284    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		break;

	case PB:
		if(Status==OUTPUT)
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	a1 f4       	brne	.+40     	; 0x1110 <Dio_WriteDirectionChannel+0x108>
		{
			SET_BIT(DDRB_REG,Pin_num);
    10e8:	a7 e3       	ldi	r26, 0x37	; 55
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e7 e3       	ldi	r30, 0x37	; 55
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <Dio_WriteDirectionChannel+0xfe>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <Dio_WriteDirectionChannel+0xfa>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	77 c0       	rjmp	.+238    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		else if(Status==INPUT)
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	88 23       	and	r24, r24
    1114:	09 f0       	breq	.+2      	; 0x1118 <Dio_WriteDirectionChannel+0x110>
    1116:	73 c0       	rjmp	.+230    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		{
			CLEAR_BIT(DDRB_REG,Pin_num);
    1118:	a7 e3       	ldi	r26, 0x37	; 55
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e7 e3       	ldi	r30, 0x37	; 55
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <Dio_WriteDirectionChannel+0x12e>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <Dio_WriteDirectionChannel+0x12a>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	5e c0       	rjmp	.+188    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		break;
	case PC:
		if(Status==OUTPUT)
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	a1 f4       	brne	.+40     	; 0x1170 <Dio_WriteDirectionChannel+0x168>
		{
			SET_BIT(DDRC_REG,Pin_num);
    1148:	a4 e3       	ldi	r26, 0x34	; 52
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e4 e3       	ldi	r30, 0x34	; 52
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <Dio_WriteDirectionChannel+0x15e>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <Dio_WriteDirectionChannel+0x15a>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	47 c0       	rjmp	.+142    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		else if(Status==INPUT)
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	88 23       	and	r24, r24
    1174:	09 f0       	breq	.+2      	; 0x1178 <Dio_WriteDirectionChannel+0x170>
    1176:	43 c0       	rjmp	.+134    	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		{
			CLEAR_BIT(DDRC_REG,Pin_num);
    1178:	a4 e3       	ldi	r26, 0x34	; 52
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e4 e3       	ldi	r30, 0x34	; 52
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <Dio_WriteDirectionChannel+0x18e>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <Dio_WriteDirectionChannel+0x18a>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	2e c0       	rjmp	.+92     	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		break;
	case PD:
		if(Status==OUTPUT)
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a1 f4       	brne	.+40     	; 0x11d0 <Dio_WriteDirectionChannel+0x1c8>
		{
			SET_BIT(DDRD_REG,Pin_num);
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <Dio_WriteDirectionChannel+0x1be>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <Dio_WriteDirectionChannel+0x1ba>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	17 c0       	rjmp	.+46     	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		}
		else if(Status==INPUT)
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	88 23       	and	r24, r24
    11d4:	a1 f4       	brne	.+40     	; 0x11fe <Dio_WriteDirectionChannel+0x1f6>
		{
			CLEAR_BIT(DDRD_REG,Pin_num);
    11d6:	a1 e3       	ldi	r26, 0x31	; 49
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e1 e3       	ldi	r30, 0x31	; 49
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <Dio_WriteDirectionChannel+0x1ec>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <Dio_WriteDirectionChannel+0x1e8>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
		}
		break;

	}

}
    11fe:	26 96       	adiw	r28, 0x06	; 6
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <Dio_ReadPort>:

Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <Dio_ReadPort+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <Dio_ReadPort+0x8>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Level;

#ifdef DioDevErrorDetect==STD_OK
	if(PortId>PD)
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	84 30       	cpi	r24, 0x04	; 4
    1222:	38 f0       	brcs	.+14     	; 0x1232 <Dio_ReadPort+0x22>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_ReadPort_API,DIO_E_PARAM_INVALID_PORT_ID);
    1224:	88 e7       	ldi	r24, 0x78	; 120
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	42 e0       	ldi	r20, 0x02	; 2
    122c:	24 e1       	ldi	r18, 0x14	; 20
    122e:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
	switch(PortId)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3c 83       	std	Y+4, r19	; 0x04
    123a:	2b 83       	std	Y+3, r18	; 0x03
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	d1 f0       	breq	.+52     	; 0x127a <Dio_ReadPort+0x6a>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <Dio_ReadPort+0x4a>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	61 f0       	breq	.+24     	; 0x1270 <Dio_ReadPort+0x60>
    1258:	1e c0       	rjmp	.+60     	; 0x1296 <Dio_ReadPort+0x86>
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <Dio_ReadPort+0x74>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <Dio_ReadPort+0x7e>
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <Dio_ReadPort+0x86>
	{
	case PA:
		Level = PORTA_REG;
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <Dio_ReadPort+0x86>
		break;
	case PB:
		Level = PORTB_REG;
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <Dio_ReadPort+0x86>
		break;
	case PC:
		Level = PORTC_REG;
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <Dio_ReadPort+0x86>
		break;
	case PD:
		Level = PORTD_REG;
    128e:	e2 e3       	ldi	r30, 0x32	; 50
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Level;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <Dio_WritePort>:

void Dio_WritePort(Dio_PortType PortId,Dio_PortLevelType Level)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <Dio_WritePort+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <Dio_WritePort+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
#ifdef DioDevErrorDetect==STD_OK
	if(PortId>PD)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	38 f0       	brcs	.+14     	; 0x12ca <Dio_WritePort+0x24>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_WritePort_API,DIO_E_PARAM_INVALID_PORT_ID);
    12bc:	88 e7       	ldi	r24, 0x78	; 120
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	43 e0       	ldi	r20, 0x03	; 3
    12c4:	24 e1       	ldi	r18, 0x14	; 20
    12c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
	switch(PortId)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	d1 f0       	breq	.+52     	; 0x1312 <Dio_WritePort+0x6c>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <Dio_WritePort+0x4c>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <Dio_WritePort+0x62>
    12f0:	1e c0       	rjmp	.+60     	; 0x132e <Dio_WritePort+0x88>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	81 f0       	breq	.+32     	; 0x131c <Dio_WritePort+0x76>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	81 f0       	breq	.+32     	; 0x1326 <Dio_WritePort+0x80>
    1306:	13 c0       	rjmp	.+38     	; 0x132e <Dio_WritePort+0x88>
	{
	case PA:
		PORTA_REG=Level;
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	0e c0       	rjmp	.+28     	; 0x132e <Dio_WritePort+0x88>
		break;
	case PB:
		PORTB_REG=Level;
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
    131a:	09 c0       	rjmp	.+18     	; 0x132e <Dio_WritePort+0x88>
		break;
	case PC:
		PORTB_REG=Level;
    131c:	e8 e3       	ldi	r30, 0x38	; 56
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
    1324:	04 c0       	rjmp	.+8      	; 0x132e <Dio_WritePort+0x88>
		break;
	case PD:
		PORTB_REG=Level;
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	80 83       	st	Z, r24
		break;
	}
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Dio_WriteDirectionPort>:

void Dio_WriteDirectionPort(Dio_PortType PortId,Dio_ChannelStatus Status )
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <Dio_WriteDirectionPort+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <Dio_WriteDirectionPort+0x8>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	6a 83       	std	Y+2, r22	; 0x02
#ifdef DioDevErrorDetect==STD_OK
	if(PortId>PD)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	38 f0       	brcs	.+14     	; 0x1360 <Dio_WriteDirectionPort+0x24>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_WriteDirectionPort_API,DIO_E_PARAM_INVALID_PORT_ID);
    1352:	88 e7       	ldi	r24, 0x78	; 120
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	47 e0       	ldi	r20, 0x07	; 7
    135a:	24 e1       	ldi	r18, 0x14	; 20
    135c:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
	switch(PortId)
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3c 83       	std	Y+4, r19	; 0x04
    1368:	2b 83       	std	Y+3, r18	; 0x03
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	d1 f0       	breq	.+52     	; 0x13a8 <Dio_WriteDirectionPort+0x6c>
    1374:	2b 81       	ldd	r18, Y+3	; 0x03
    1376:	3c 81       	ldd	r19, Y+4	; 0x04
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <Dio_WriteDirectionPort+0x4c>
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 f0       	breq	.+24     	; 0x139e <Dio_WriteDirectionPort+0x62>
    1386:	1e c0       	rjmp	.+60     	; 0x13c4 <Dio_WriteDirectionPort+0x88>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <Dio_WriteDirectionPort+0x76>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	91 05       	cpc	r25, r1
    139a:	81 f0       	breq	.+32     	; 0x13bc <Dio_WriteDirectionPort+0x80>
    139c:	13 c0       	rjmp	.+38     	; 0x13c4 <Dio_WriteDirectionPort+0x88>
	{
	case PA:
		DDRA_REG=Status;
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	80 83       	st	Z, r24
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <Dio_WriteDirectionPort+0x88>
		break;
	case PB:
		DDRB_REG=Status;
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <Dio_WriteDirectionPort+0x88>
		break;
	case PC:
		DDRC_REG=Status;
    13b2:	e4 e3       	ldi	r30, 0x34	; 52
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <Dio_WriteDirectionPort+0x88>
		break;
	case PD:
		DDRD_REG=Status;
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
		break;
	}
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <Dio_ReadChannelGroup>:

Dio_PortLevelType Dio_ReadChannelGroup(const Dio_ChannelGroupType* ChannelGroupIdPtr)
{
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <Dio_ReadChannelGroup+0xe>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	9b 83       	std	Y+3, r25	; 0x03
    13e8:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Level;

#ifdef DioDevErrorDetect==STD_OK
	if(ChannelGroupIdPtr==NULL)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	39 f4       	brne	.+14     	; 0x1400 <Dio_ReadChannelGroup+0x2e>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_ReadChannelGroup_API,DIO_E_PARAM_POINTER);
    13f2:	88 e7       	ldi	r24, 0x78	; 120
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	44 e0       	ldi	r20, 0x04	; 4
    13fa:	20 e2       	ldi	r18, 0x20	; 32
    13fc:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif
   Level = (Dio_ReadChannel(ChannelGroupIdPtr->port)& (ChannelGroupIdPtr->mask))
    1400:	ea 81       	ldd	r30, Y+2	; 0x02
    1402:	fb 81       	ldd	r31, Y+3	; 0x03
    1404:	85 81       	ldd	r24, Z+5	; 0x05
    1406:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <Dio_ReadChannel>
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	ea 81       	ldd	r30, Y+2	; 0x02
    1414:	fb 81       	ldd	r31, Y+3	; 0x03
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	a2 81       	ldd	r26, Z+2	; 0x02
    141c:	b3 81       	ldd	r27, Z+3	; 0x03
    141e:	28 23       	and	r18, r24
    1420:	39 23       	and	r19, r25
    1422:	4a 23       	and	r20, r26
    1424:	5b 23       	and	r21, r27
    1426:	ea 81       	ldd	r30, Y+2	; 0x02
    1428:	fb 81       	ldd	r31, Y+3	; 0x03
    142a:	84 81       	ldd	r24, Z+4	; 0x04
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	79 01       	movw	r14, r18
    1432:	8a 01       	movw	r16, r20
    1434:	04 c0       	rjmp	.+8      	; 0x143e <Dio_ReadChannelGroup+0x6c>
    1436:	16 95       	lsr	r17
    1438:	07 95       	ror	r16
    143a:	f7 94       	ror	r15
    143c:	e7 94       	ror	r14
    143e:	8a 95       	dec	r24
    1440:	d2 f7       	brpl	.-12     	; 0x1436 <Dio_ReadChannelGroup+0x64>
    1442:	d8 01       	movw	r26, r16
    1444:	c7 01       	movw	r24, r14
    1446:	89 83       	std	Y+1, r24	; 0x01
		   >>(ChannelGroupIdPtr->offset);

	return Level;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	08 95       	ret

0000145e <Dio_WriteChannelGroup>:

void Dio_WriteChannelGroup(const Dio_ChannelGroupType* ChannelGroupIdPtr,Dio_PortLevelType Level)
{
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <Dio_WriteChannelGroup+0xe>
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	6b 83       	std	Y+3, r22	; 0x03
	Dio_WriteChannel(((ChannelGroupIdPtr->port) &(ChannelGroupIdPtr->mask))
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	85 81       	ldd	r24, Z+5	; 0x05
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	e9 81       	ldd	r30, Y+1	; 0x01
    1488:	fa 81       	ldd	r31, Y+2	; 0x02
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	a2 81       	ldd	r26, Z+2	; 0x02
    1490:	b3 81       	ldd	r27, Z+3	; 0x03
    1492:	28 23       	and	r18, r24
    1494:	39 23       	and	r19, r25
    1496:	4a 23       	and	r20, r26
    1498:	5b 23       	and	r21, r27
    149a:	e9 81       	ldd	r30, Y+1	; 0x01
    149c:	fa 81       	ldd	r31, Y+2	; 0x02
    149e:	84 81       	ldd	r24, Z+4	; 0x04
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	79 01       	movw	r14, r18
    14a6:	8a 01       	movw	r16, r20
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <Dio_WriteChannelGroup+0x54>
    14aa:	16 95       	lsr	r17
    14ac:	07 95       	ror	r16
    14ae:	f7 94       	ror	r15
    14b0:	e7 94       	ror	r14
    14b2:	8a 95       	dec	r24
    14b4:	d2 f7       	brpl	.-12     	; 0x14aa <Dio_WriteChannelGroup+0x4c>
    14b6:	d8 01       	movw	r26, r16
    14b8:	c7 01       	movw	r24, r14
    14ba:	6b 81       	ldd	r22, Y+3	; 0x03
    14bc:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
			>>ChannelGroupIdPtr->offset,Level);
#ifdef DioDevErrorDetect==STD_OK

	if(ChannelGroupIdPtr==NULL)
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	39 f4       	brne	.+14     	; 0x14d6 <Dio_WriteChannelGroup+0x78>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_WriteChannelGroup_API,DIO_E_PARAM_POINTER);
    14c8:	88 e7       	ldi	r24, 0x78	; 120
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	45 e0       	ldi	r20, 0x05	; 5
    14d0:	20 e2       	ldi	r18, 0x20	; 32
    14d2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif

}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	08 95       	ret

000014ea <Dio_FlipChannel>:

#ifdef DioFlipChannelApi==STD_ON
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <Dio_FlipChannel+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <Dio_FlipChannel+0x8>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <Dio_FlipChannel+0xa>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	8c 83       	std	Y+4, r24	; 0x04
	Dio_LevelType Level;
	Dio_PortType PortId;
	PortId = ChannelId/NumOfPort;
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	86 95       	lsr	r24
    14fe:	86 95       	lsr	r24
    1500:	86 95       	lsr	r24
    1502:	8a 83       	std	Y+2, r24	; 0x02
	u8 Pin_num = ChannelId % NumOfPort ;
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	87 70       	andi	r24, 0x07	; 7
    1508:	89 83       	std	Y+1, r24	; 0x01
#ifdef DioDevErrorDetect==STD_OK
	if(ChannelId>=TOTAL_PINS)
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	80 32       	cpi	r24, 0x20	; 32
    150e:	38 f0       	brcs	.+14     	; 0x151e <Dio_FlipChannel+0x34>
	{
		Det_ReportError(DIO_Driver,Instance,Dio_FlipChannel_API,DIO_E_PARAM_INVALID_CHANNEL_ID);
    1510:	88 e7       	ldi	r24, 0x78	; 120
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	41 e1       	ldi	r20, 0x11	; 17
    1518:	2a e0       	ldi	r18, 0x0A	; 10
    151a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Det_ReportError>
	}
#endif

	switch(PortId)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3e 83       	std	Y+6, r19	; 0x06
    1526:	2d 83       	std	Y+5, r18	; 0x05
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	61 f1       	breq	.+88     	; 0x158a <Dio_FlipChannel+0xa0>
    1532:	2d 81       	ldd	r18, Y+5	; 0x05
    1534:	3e 81       	ldd	r19, Y+6	; 0x06
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <Dio_FlipChannel+0x5c>
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	69 f0       	breq	.+26     	; 0x155e <Dio_FlipChannel+0x74>
    1544:	63 c0       	rjmp	.+198    	; 0x160c <Dio_FlipChannel+0x122>
    1546:	2d 81       	ldd	r18, Y+5	; 0x05
    1548:	3e 81       	ldd	r19, Y+6	; 0x06
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	99 f1       	breq	.+102    	; 0x15b6 <Dio_FlipChannel+0xcc>
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	91 05       	cpc	r25, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <Dio_FlipChannel+0x72>
    155a:	43 c0       	rjmp	.+134    	; 0x15e2 <Dio_FlipChannel+0xf8>
    155c:	57 c0       	rjmp	.+174    	; 0x160c <Dio_FlipChannel+0x122>
	{
	case PA:
		Level = TOGGLE_BIT(PORTA_REG,Pin_num);
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <Dio_FlipChannel+0x92>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <Dio_FlipChannel+0x8e>
    1580:	84 27       	eor	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	8c 91       	ld	r24, X
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	41 c0       	rjmp	.+130    	; 0x160c <Dio_FlipChannel+0x122>
		break;
	case PB:
		Level = TOGGLE_BIT(PORTB_REG,Pin_num);
    158a:	a8 e3       	ldi	r26, 0x38	; 56
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <Dio_FlipChannel+0xbe>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <Dio_FlipChannel+0xba>
    15ac:	84 27       	eor	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	8c 91       	ld	r24, X
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	2b c0       	rjmp	.+86     	; 0x160c <Dio_FlipChannel+0x122>
		break;
	case PC:
		Level = TOGGLE_BIT(PORTC_REG,Pin_num);
    15b6:	a5 e3       	ldi	r26, 0x35	; 53
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e5 e3       	ldi	r30, 0x35	; 53
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <Dio_FlipChannel+0xea>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <Dio_FlipChannel+0xe6>
    15d8:	84 27       	eor	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	8c 91       	ld	r24, X
    15de:	8b 83       	std	Y+3, r24	; 0x03
    15e0:	15 c0       	rjmp	.+42     	; 0x160c <Dio_FlipChannel+0x122>
		break;
	case PD:
		Level = TOGGLE_BIT(PORTD_REG,Pin_num);
    15e2:	a2 e3       	ldi	r26, 0x32	; 50
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e2 e3       	ldi	r30, 0x32	; 50
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <Dio_FlipChannel+0x116>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <Dio_FlipChannel+0x112>
    1604:	84 27       	eor	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	8c 91       	ld	r24, X
    160a:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}
	return Level;
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    160e:	26 96       	adiw	r28, 0x06	; 6
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <Dio_Init>:
#endif

//Dio_WriteDirectionChannel(PINA0,ChannelType[PINA0]);

void Dio_Init(void)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	Dio_ChannelType ChannelId;
	for(ChannelId=PINA0;ChannelId<TOTAL_PINS;ChannelId++)
    162a:	19 82       	std	Y+1, r1	; 0x01
    162c:	0e c0       	rjmp	.+28     	; 0x164a <Dio_Init+0x2a>
	{
		Dio_WriteDirectionChannel(ChannelId,ChannelStatus[ChannelId]);
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	fc 01       	movw	r30, r24
    1636:	e8 59       	subi	r30, 0x98	; 152
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	90 81       	ld	r25, Z
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	69 2f       	mov	r22, r25
    1640:	0e 94 04 08 	call	0x1008	; 0x1008 <Dio_WriteDirectionChannel>
//Dio_WriteDirectionChannel(PINA0,ChannelType[PINA0]);

void Dio_Init(void)
{
	Dio_ChannelType ChannelId;
	for(ChannelId=PINA0;ChannelId<TOTAL_PINS;ChannelId++)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	80 32       	cpi	r24, 0x20	; 32
    164e:	78 f3       	brcs	.-34     	; 0x162e <Dio_Init+0xe>
	{
		Dio_WriteDirectionChannel(ChannelId,ChannelStatus[ChannelId]);
		//Dio_WriteChannel(ChannelId,ChannelLevel[ChannelId]);
	}

}
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <LCD_WriteCommand>:
#include "LCD_Cfg.h"

#if( MODE ==BIT_8_MODE)

void LCD_WriteCommand(u8 Data)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	6d 97       	sbiw	r28, 0x1d	; 29
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_WriteChannel(RS,STD_LOW);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
	Dio_WriteChannel(RW,STD_LOW);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
	Dio_WriteChannel(E,STD_HIGH);
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
	Dio_WritePort(PORTLCD,Data);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	6d 8d       	ldd	r22, Y+29	; 0x1d
    168a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Dio_WritePort>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e8       	ldi	r26, 0x80	; 128
    1694:	bf e3       	ldi	r27, 0x3F	; 63
    1696:	89 8f       	std	Y+25, r24	; 0x19
    1698:	9a 8f       	std	Y+26, r25	; 0x1a
    169a:	ab 8f       	std	Y+27, r26	; 0x1b
    169c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	69 8d       	ldd	r22, Y+25	; 0x19
    16a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8d 8b       	std	Y+21, r24	; 0x15
    16b8:	9e 8b       	std	Y+22, r25	; 0x16
    16ba:	af 8b       	std	Y+23, r26	; 0x17
    16bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16be:	6d 89       	ldd	r22, Y+21	; 0x15
    16c0:	7e 89       	ldd	r23, Y+22	; 0x16
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <LCD_WriteCommand+0x88>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 8b       	std	Y+20, r25	; 0x14
    16dc:	8b 8b       	std	Y+19, r24	; 0x13
    16de:	3f c0       	rjmp	.+126    	; 0x175e <LCD_WriteCommand+0x106>
	else if (__tmp > 65535)
    16e0:	6d 89       	ldd	r22, Y+21	; 0x15
    16e2:	7e 89       	ldd	r23, Y+22	; 0x16
    16e4:	8f 89       	ldd	r24, Y+23	; 0x17
    16e6:	98 8d       	ldd	r25, Y+24	; 0x18
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <LCD_WriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	69 8d       	ldd	r22, Y+25	; 0x19
    16fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <LCD_WriteCommand+0xe8>
    1722:	88 ec       	ldi	r24, 0xC8	; 200
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9a 8b       	std	Y+18, r25	; 0x12
    1728:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172a:	89 89       	ldd	r24, Y+17	; 0x11
    172c:	9a 89       	ldd	r25, Y+18	; 0x12
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <LCD_WriteCommand+0xd6>
    1732:	9a 8b       	std	Y+18, r25	; 0x12
    1734:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8b 89       	ldd	r24, Y+19	; 0x13
    1738:	9c 89       	ldd	r25, Y+20	; 0x14
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8b 89       	ldd	r24, Y+19	; 0x13
    1742:	9c 89       	ldd	r25, Y+20	; 0x14
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <LCD_WriteCommand+0xca>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <LCD_WriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6d 89       	ldd	r22, Y+21	; 0x15
    174c:	7e 89       	ldd	r23, Y+22	; 0x16
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	8b 89       	ldd	r24, Y+19	; 0x13
    1760:	9c 89       	ldd	r25, Y+20	; 0x14
    1762:	98 8b       	std	Y+16, r25	; 0x10
    1764:	8f 87       	std	Y+15, r24	; 0x0f
    1766:	8f 85       	ldd	r24, Y+15	; 0x0f
    1768:	98 89       	ldd	r25, Y+16	; 0x10
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_WriteCommand+0x112>
    176e:	98 8b       	std	Y+16, r25	; 0x10
    1770:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_WriteChannel(E,STD_LOW);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e8       	ldi	r26, 0x80	; 128
    1780:	bf e3       	ldi	r27, 0x3F	; 63
    1782:	8b 87       	std	Y+11, r24	; 0x0b
    1784:	9c 87       	std	Y+12, r25	; 0x0c
    1786:	ad 87       	std	Y+13, r26	; 0x0d
    1788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	6b 85       	ldd	r22, Y+11	; 0x0b
    178c:	7c 85       	ldd	r23, Y+12	; 0x0c
    178e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1790:	9e 85       	ldd	r25, Y+14	; 0x0e
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a ef       	ldi	r20, 0xFA	; 250
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8f 83       	std	Y+7, r24	; 0x07
    17a4:	98 87       	std	Y+8, r25	; 0x08
    17a6:	a9 87       	std	Y+9, r26	; 0x09
    17a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	2c f4       	brge	.+10     	; 0x17cc <LCD_WriteCommand+0x174>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <LCD_WriteCommand+0x1f2>
	else if (__tmp > 65535)
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	4c f5       	brge	.+82     	; 0x1836 <LCD_WriteCommand+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	0f c0       	rjmp	.+30     	; 0x182c <LCD_WriteCommand+0x1d4>
    180e:	88 ec       	ldi	r24, 0xC8	; 200
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_WriteCommand+0x1c2>
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	69 f7       	brne	.-38     	; 0x180e <LCD_WriteCommand+0x1b6>
    1834:	14 c0       	rjmp	.+40     	; 0x185e <LCD_WriteCommand+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1836:	6f 81       	ldd	r22, Y+7	; 0x07
    1838:	78 85       	ldd	r23, Y+8	; 0x08
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_WriteCommand+0x1fe>
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    185e:	6d 96       	adiw	r28, 0x1d	; 29
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <LCD_WriteData>:


void LCD_WriteData(u8 Data)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	6d 97       	sbiw	r28, 0x1d	; 29
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_WriteChannel(RS,STD_HIGH);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
	Dio_WriteChannel(RW,STD_LOW);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
	Dio_WriteChannel(E,STD_HIGH);
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
	Dio_WritePort(PORTLCD,Data);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18a2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Dio_WritePort>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e8       	ldi	r26, 0x80	; 128
    18ac:	bf e3       	ldi	r27, 0x3F	; 63
    18ae:	89 8f       	std	Y+25, r24	; 0x19
    18b0:	9a 8f       	std	Y+26, r25	; 0x1a
    18b2:	ab 8f       	std	Y+27, r26	; 0x1b
    18b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	69 8d       	ldd	r22, Y+25	; 0x19
    18b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a ef       	ldi	r20, 0xFA	; 250
    18c4:	54 e4       	ldi	r21, 0x44	; 68
    18c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8d 8b       	std	Y+21, r24	; 0x15
    18d0:	9e 8b       	std	Y+22, r25	; 0x16
    18d2:	af 8b       	std	Y+23, r26	; 0x17
    18d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d6:	6d 89       	ldd	r22, Y+21	; 0x15
    18d8:	7e 89       	ldd	r23, Y+22	; 0x16
    18da:	8f 89       	ldd	r24, Y+23	; 0x17
    18dc:	98 8d       	ldd	r25, Y+24	; 0x18
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <LCD_WriteData+0x88>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <LCD_WriteData+0x106>
	else if (__tmp > 65535)
    18f8:	6d 89       	ldd	r22, Y+21	; 0x15
    18fa:	7e 89       	ldd	r23, Y+22	; 0x16
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <LCD_WriteData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	69 8d       	ldd	r22, Y+25	; 0x19
    1912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <LCD_WriteData+0xe8>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9a 8b       	std	Y+18, r25	; 0x12
    1940:	89 8b       	std	Y+17, r24	; 0x11
    1942:	89 89       	ldd	r24, Y+17	; 0x11
    1944:	9a 89       	ldd	r25, Y+18	; 0x12
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_WriteData+0xd6>
    194a:	9a 8b       	std	Y+18, r25	; 0x12
    194c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9c 8b       	std	Y+20, r25	; 0x14
    1956:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8b 89       	ldd	r24, Y+19	; 0x13
    195a:	9c 89       	ldd	r25, Y+20	; 0x14
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <LCD_WriteData+0xca>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <LCD_WriteData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6d 89       	ldd	r22, Y+21	; 0x15
    1964:	7e 89       	ldd	r23, Y+22	; 0x16
    1966:	8f 89       	ldd	r24, Y+23	; 0x17
    1968:	98 8d       	ldd	r25, Y+24	; 0x18
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9c 8b       	std	Y+20, r25	; 0x14
    1974:	8b 8b       	std	Y+19, r24	; 0x13
    1976:	8b 89       	ldd	r24, Y+19	; 0x13
    1978:	9c 89       	ldd	r25, Y+20	; 0x14
    197a:	98 8b       	std	Y+16, r25	; 0x10
    197c:	8f 87       	std	Y+15, r24	; 0x0f
    197e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1980:	98 89       	ldd	r25, Y+16	; 0x10
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_WriteData+0x112>
    1986:	98 8b       	std	Y+16, r25	; 0x10
    1988:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_WriteChannel(E,STD_LOW);
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e8       	ldi	r26, 0x80	; 128
    1998:	bf e3       	ldi	r27, 0x3F	; 63
    199a:	8b 87       	std	Y+11, r24	; 0x0b
    199c:	9c 87       	std	Y+12, r25	; 0x0c
    199e:	ad 87       	std	Y+13, r26	; 0x0d
    19a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8f 83       	std	Y+7, r24	; 0x07
    19bc:	98 87       	std	Y+8, r25	; 0x08
    19be:	a9 87       	std	Y+9, r26	; 0x09
    19c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_WriteData+0x174>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <LCD_WriteData+0x1f2>
	else if (__tmp > 65535)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <LCD_WriteData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_WriteData+0x1d4>
    1a26:	88 ec       	ldi	r24, 0xC8	; 200
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_WriteData+0x1c2>
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <LCD_WriteData+0x1b6>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LCD_WriteData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_WriteData+0x1fe>
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a76:	6d 96       	adiw	r28, 0x1d	; 29
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <LCD_init>:

void LCD_init(void)
{
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	ca 55       	subi	r28, 0x5A	; 90
    1a96:	d0 40       	sbci	r29, 0x00	; 0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e9 5a       	subi	r30, 0xA9	; 169
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a8 e4       	ldi	r26, 0x48	; 72
    1aae:	b2 e4       	ldi	r27, 0x42	; 66
    1ab0:	80 83       	st	Z, r24
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	a2 83       	std	Z+2, r26	; 0x02
    1ab6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	8e 01       	movw	r16, r28
    1aba:	0d 5a       	subi	r16, 0xAD	; 173
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e9 5a       	subi	r30, 0xA9	; 169
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a ef       	ldi	r20, 0xFA	; 250
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 83       	st	Z, r24
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	a2 83       	std	Z+2, r26	; 0x02
    1ae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ed 5a       	subi	r30, 0xAD	; 173
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	44 f4       	brge	.+16     	; 0x1b14 <LCD_init+0x8c>
		__ticks = 1;
    1b04:	fe 01       	movw	r30, r28
    1b06:	ef 5a       	subi	r30, 0xAF	; 175
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	64 c0       	rjmp	.+200    	; 0x1bdc <LCD_init+0x154>
	else if (__tmp > 65535)
    1b14:	fe 01       	movw	r30, r28
    1b16:	ed 5a       	subi	r30, 0xAD	; 173
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	0c f0       	brlt	.+2      	; 0x1b34 <LCD_init+0xac>
    1b32:	43 c0       	rjmp	.+134    	; 0x1bba <LCD_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	fe 01       	movw	r30, r28
    1b36:	e9 5a       	subi	r30, 0xA9	; 169
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8e 01       	movw	r16, r28
    1b54:	0f 5a       	subi	r16, 0xAF	; 175
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	f8 01       	movw	r30, r16
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	1f c0       	rjmp	.+62     	; 0x1baa <LCD_init+0x122>
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e1 5b       	subi	r30, 0xB1	; 177
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e1 5b       	subi	r30, 0xB1	; 177
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_init+0xfc>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e1 5b       	subi	r30, 0xB1	; 177
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	de 01       	movw	r26, r28
    1b94:	af 5a       	subi	r26, 0xAF	; 175
    1b96:	bf 4f       	sbci	r27, 0xFF	; 255
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ef 5a       	subi	r30, 0xAF	; 175
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	9c 93       	st	X, r25
    1ba8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	fe 01       	movw	r30, r28
    1bac:	ef 5a       	subi	r30, 0xAF	; 175
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	d1 f6       	brne	.-76     	; 0x1b6c <LCD_init+0xe4>
    1bb8:	27 c0       	rjmp	.+78     	; 0x1c08 <LCD_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	8e 01       	movw	r16, r28
    1bbc:	0f 5a       	subi	r16, 0xAF	; 175
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ed 5a       	subi	r30, 0xAD	; 173
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	de 01       	movw	r26, r28
    1bde:	a3 5b       	subi	r26, 0xB3	; 179
    1be0:	bf 4f       	sbci	r27, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	ef 5a       	subi	r30, 0xAF	; 175
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	8d 93       	st	X+, r24
    1bee:	9c 93       	st	X, r25
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e3 5b       	subi	r30, 0xB3	; 179
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_init+0x172>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e3 5b       	subi	r30, 0xB3	; 179
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_WriteCommand(0x38);
    1c08:	88 e3       	ldi	r24, 0x38	; 56
    1c0a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e7 5b       	subi	r30, 0xB7	; 183
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a8 e4       	ldi	r26, 0x48	; 72
    1c1a:	b2 e4       	ldi	r27, 0x42	; 66
    1c1c:	80 83       	st	Z, r24
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	a2 83       	std	Z+2, r26	; 0x02
    1c22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c24:	8e 01       	movw	r16, r28
    1c26:	0b 5b       	subi	r16, 0xBB	; 187
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e7 5b       	subi	r30, 0xB7	; 183
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	2b ea       	ldi	r18, 0xAB	; 171
    1c3a:	3a ea       	ldi	r19, 0xAA	; 170
    1c3c:	4a e2       	ldi	r20, 0x2A	; 42
    1c3e:	50 e4       	ldi	r21, 0x40	; 64
    1c40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	f8 01       	movw	r30, r16
    1c4a:	80 83       	st	Z, r24
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	a2 83       	std	Z+2, r26	; 0x02
    1c50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c52:	fe 01       	movw	r30, r28
    1c54:	eb 5b       	subi	r30, 0xBB	; 187
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	34 f4       	brge	.+12     	; 0x1c7c <LCD_init+0x1f4>
		__ticks = 1;
    1c70:	fe 01       	movw	r30, r28
    1c72:	ec 5b       	subi	r30, 0xBC	; 188
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 83       	st	Z, r24
    1c7a:	a7 c0       	rjmp	.+334    	; 0x1dca <LCD_init+0x342>
	else if (__tmp > 255)
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	eb 5b       	subi	r30, 0xBB	; 187
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <LCD_init+0x214>
    1c9a:	87 c0       	rjmp	.+270    	; 0x1daa <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5b       	subi	r30, 0xB7	; 183
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a e7       	ldi	r20, 0x7A	; 122
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e0 5c       	subi	r30, 0xC0	; 192
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 83       	st	Z, r24
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	a2 83       	std	Z+2, r26	; 0x02
    1cc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e0 5c       	subi	r30, 0xC0	; 192
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8c af       	std	Y+60, r24	; 0x3c
    1ce8:	9d af       	std	Y+61, r25	; 0x3d
    1cea:	ae af       	std	Y+62, r26	; 0x3e
    1cec:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1cee:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cf0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cf2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cf4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_init+0x288>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9b af       	std	Y+59, r25	; 0x3b
    1d0c:	8a af       	std	Y+58, r24	; 0x3a
    1d0e:	42 c0       	rjmp	.+132    	; 0x1d94 <LCD_init+0x30c>
	else if (__tmp > 65535)
    1d10:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d12:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d14:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d16:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	64 f5       	brge	.+88     	; 0x1d80 <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e0 5c       	subi	r30, 0xC0	; 192
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9b af       	std	Y+59, r25	; 0x3b
    1d54:	8a af       	std	Y+58, r24	; 0x3a
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <LCD_init+0x2ee>
    1d58:	88 ec       	ldi	r24, 0xC8	; 200
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	99 af       	std	Y+57, r25	; 0x39
    1d5e:	88 af       	std	Y+56, r24	; 0x38
    1d60:	88 ad       	ldd	r24, Y+56	; 0x38
    1d62:	99 ad       	ldd	r25, Y+57	; 0x39
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_init+0x2dc>
    1d68:	99 af       	std	Y+57, r25	; 0x39
    1d6a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d6e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9b af       	std	Y+59, r25	; 0x3b
    1d74:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d78:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <LCD_init+0x2d0>
    1d7e:	2e c0       	rjmp	.+92     	; 0x1ddc <LCD_init+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d82:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d84:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d86:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9b af       	std	Y+59, r25	; 0x3b
    1d92:	8a af       	std	Y+58, r24	; 0x3a
    1d94:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d96:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d98:	9f ab       	std	Y+55, r25	; 0x37
    1d9a:	8e ab       	std	Y+54, r24	; 0x36
    1d9c:	8e a9       	ldd	r24, Y+54	; 0x36
    1d9e:	9f a9       	ldd	r25, Y+55	; 0x37
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_init+0x318>
    1da4:	9f ab       	std	Y+55, r25	; 0x37
    1da6:	8e ab       	std	Y+54, r24	; 0x36
    1da8:	19 c0       	rjmp	.+50     	; 0x1ddc <LCD_init+0x354>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1daa:	8e 01       	movw	r16, r28
    1dac:	0c 5b       	subi	r16, 0xBC	; 188
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	fe 01       	movw	r30, r28
    1db2:	eb 5b       	subi	r30, 0xBB	; 187
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	80 83       	st	Z, r24
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ec 5b       	subi	r30, 0xBC	; 188
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd4:	8d a9       	ldd	r24, Y+53	; 0x35
    1dd6:	8a 95       	dec	r24
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_init+0x34e>
    1dda:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(50);
	LCD_WriteCommand(0x0c);
    1ddc:	8c e0       	ldi	r24, 0x0C	; 12
    1dde:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a8 e4       	ldi	r26, 0x48	; 72
    1de8:	b2 e4       	ldi	r27, 0x42	; 66
    1dea:	89 ab       	std	Y+49, r24	; 0x31
    1dec:	9a ab       	std	Y+50, r25	; 0x32
    1dee:	ab ab       	std	Y+51, r26	; 0x33
    1df0:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1df2:	69 a9       	ldd	r22, Y+49	; 0x31
    1df4:	7a a9       	ldd	r23, Y+50	; 0x32
    1df6:	8b a9       	ldd	r24, Y+51	; 0x33
    1df8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfa:	2b ea       	ldi	r18, 0xAB	; 171
    1dfc:	3a ea       	ldi	r19, 0xAA	; 170
    1dfe:	4a e2       	ldi	r20, 0x2A	; 42
    1e00:	50 e4       	ldi	r21, 0x40	; 64
    1e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	8d a7       	std	Y+45, r24	; 0x2d
    1e0c:	9e a7       	std	Y+46, r25	; 0x2e
    1e0e:	af a7       	std	Y+47, r26	; 0x2f
    1e10:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1e12:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e14:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e18:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e8       	ldi	r20, 0x80	; 128
    1e20:	5f e3       	ldi	r21, 0x3F	; 63
    1e22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e26:	88 23       	and	r24, r24
    1e28:	1c f4       	brge	.+6      	; 0x1e30 <LCD_init+0x3a8>
		__ticks = 1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	8c a7       	std	Y+44, r24	; 0x2c
    1e2e:	91 c0       	rjmp	.+290    	; 0x1f52 <LCD_init+0x4ca>
	else if (__tmp > 255)
    1e30:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e32:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e36:	98 a9       	ldd	r25, Y+48	; 0x30
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	53 e4       	ldi	r21, 0x43	; 67
    1e40:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <LCD_init+0x3c2>
    1e48:	7b c0       	rjmp	.+246    	; 0x1f40 <LCD_init+0x4b8>
	{
		_delay_ms(__us / 1000.0);
    1e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e50:	9c a9       	ldd	r25, Y+52	; 0x34
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a e7       	ldi	r20, 0x7A	; 122
    1e58:	54 e4       	ldi	r21, 0x44	; 68
    1e5a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	88 a7       	std	Y+40, r24	; 0x28
    1e64:	99 a7       	std	Y+41, r25	; 0x29
    1e66:	aa a7       	std	Y+42, r26	; 0x2a
    1e68:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6a:	68 a5       	ldd	r22, Y+40	; 0x28
    1e6c:	79 a5       	ldd	r23, Y+41	; 0x29
    1e6e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e70:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a ef       	ldi	r20, 0xFA	; 250
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8c a3       	std	Y+36, r24	; 0x24
    1e84:	9d a3       	std	Y+37, r25	; 0x25
    1e86:	ae a3       	std	Y+38, r26	; 0x26
    1e88:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1e8a:	6c a1       	ldd	r22, Y+36	; 0x24
    1e8c:	7d a1       	ldd	r23, Y+37	; 0x25
    1e8e:	8e a1       	ldd	r24, Y+38	; 0x26
    1e90:	9f a1       	ldd	r25, Y+39	; 0x27
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	5f e3       	ldi	r21, 0x3F	; 63
    1e9a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e9e:	88 23       	and	r24, r24
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <LCD_init+0x424>
		__ticks = 1;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9b a3       	std	Y+35, r25	; 0x23
    1ea8:	8a a3       	std	Y+34, r24	; 0x22
    1eaa:	3f c0       	rjmp	.+126    	; 0x1f2a <LCD_init+0x4a2>
	else if (__tmp > 65535)
    1eac:	6c a1       	ldd	r22, Y+36	; 0x24
    1eae:	7d a1       	ldd	r23, Y+37	; 0x25
    1eb0:	8e a1       	ldd	r24, Y+38	; 0x26
    1eb2:	9f a1       	ldd	r25, Y+39	; 0x27
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	57 e4       	ldi	r21, 0x47	; 71
    1ebc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec0:	18 16       	cp	r1, r24
    1ec2:	4c f5       	brge	.+82     	; 0x1f16 <LCD_init+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	68 a5       	ldd	r22, Y+40	; 0x28
    1ec6:	79 a5       	ldd	r23, Y+41	; 0x29
    1ec8:	8a a5       	ldd	r24, Y+42	; 0x2a
    1eca:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e2       	ldi	r20, 0x20	; 32
    1ed2:	51 e4       	ldi	r21, 0x41	; 65
    1ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9b a3       	std	Y+35, r25	; 0x23
    1eea:	8a a3       	std	Y+34, r24	; 0x22
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <LCD_init+0x484>
    1eee:	88 ec       	ldi	r24, 0xC8	; 200
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	99 a3       	std	Y+33, r25	; 0x21
    1ef4:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef6:	88 a1       	ldd	r24, Y+32	; 0x20
    1ef8:	99 a1       	ldd	r25, Y+33	; 0x21
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_init+0x472>
    1efe:	99 a3       	std	Y+33, r25	; 0x21
    1f00:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	8a a1       	ldd	r24, Y+34	; 0x22
    1f04:	9b a1       	ldd	r25, Y+35	; 0x23
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	9b a3       	std	Y+35, r25	; 0x23
    1f0a:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f0e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	69 f7       	brne	.-38     	; 0x1eee <LCD_init+0x466>
    1f14:	24 c0       	rjmp	.+72     	; 0x1f5e <LCD_init+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	6c a1       	ldd	r22, Y+36	; 0x24
    1f18:	7d a1       	ldd	r23, Y+37	; 0x25
    1f1a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f1c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9b a3       	std	Y+35, r25	; 0x23
    1f28:	8a a3       	std	Y+34, r24	; 0x22
    1f2a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f2c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f2e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f30:	8e 8f       	std	Y+30, r24	; 0x1e
    1f32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f34:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_init+0x4ae>
    1f3a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_init+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f40:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f42:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f46:	98 a9       	ldd	r25, Y+48	; 0x30
    1f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8c a7       	std	Y+44, r24	; 0x2c
    1f52:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f54:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f58:	8a 95       	dec	r24
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_init+0x4d0>
    1f5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(50);
	LCD_WriteCommand(0x1);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e4       	ldi	r27, 0x40	; 64
    1f6c:	89 8f       	std	Y+25, r24	; 0x19
    1f6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f70:	ab 8f       	std	Y+27, r26	; 0x1b
    1f72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	69 8d       	ldd	r22, Y+25	; 0x19
    1f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a ef       	ldi	r20, 0xFA	; 250
    1f82:	54 e4       	ldi	r21, 0x44	; 68
    1f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8d 8b       	std	Y+21, r24	; 0x15
    1f8e:	9e 8b       	std	Y+22, r25	; 0x16
    1f90:	af 8b       	std	Y+23, r26	; 0x17
    1f92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_init+0x52e>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 8b       	std	Y+20, r25	; 0x14
    1fb2:	8b 8b       	std	Y+19, r24	; 0x13
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_init+0x5ac>
	else if (__tmp > 65535)
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_init+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_init+0x58e>
    1ff8:	88 ec       	ldi	r24, 0xC8	; 200
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a 8b       	std	Y+18, r25	; 0x12
    1ffe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2000:	89 89       	ldd	r24, Y+17	; 0x11
    2002:	9a 89       	ldd	r25, Y+18	; 0x12
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_init+0x57c>
    2008:	9a 8b       	std	Y+18, r25	; 0x12
    200a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8b 89       	ldd	r24, Y+19	; 0x13
    200e:	9c 89       	ldd	r25, Y+20	; 0x14
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_init+0x570>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_init+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	6d 89       	ldd	r22, Y+21	; 0x15
    2022:	7e 89       	ldd	r23, Y+22	; 0x16
    2024:	8f 89       	ldd	r24, Y+23	; 0x17
    2026:	98 8d       	ldd	r25, Y+24	; 0x18
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9c 8b       	std	Y+20, r25	; 0x14
    2032:	8b 8b       	std	Y+19, r24	; 0x13
    2034:	8b 89       	ldd	r24, Y+19	; 0x13
    2036:	9c 89       	ldd	r25, Y+20	; 0x14
    2038:	98 8b       	std	Y+16, r25	; 0x10
    203a:	8f 87       	std	Y+15, r24	; 0x0f
    203c:	8f 85       	ldd	r24, Y+15	; 0x0f
    203e:	98 89       	ldd	r25, Y+16	; 0x10
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_init+0x5b8>
    2044:	98 8b       	std	Y+16, r25	; 0x10
    2046:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_WriteCommand(0x6);
    2048:	86 e0       	ldi	r24, 0x06	; 6
    204a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e0       	ldi	r26, 0x00	; 0
    2054:	b0 e4       	ldi	r27, 0x40	; 64
    2056:	8b 87       	std	Y+11, r24	; 0x0b
    2058:	9c 87       	std	Y+12, r25	; 0x0c
    205a:	ad 87       	std	Y+13, r26	; 0x0d
    205c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2060:	7c 85       	ldd	r23, Y+12	; 0x0c
    2062:	8d 85       	ldd	r24, Y+13	; 0x0d
    2064:	9e 85       	ldd	r25, Y+14	; 0x0e
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a ef       	ldi	r20, 0xFA	; 250
    206c:	54 e4       	ldi	r21, 0x44	; 68
    206e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8f 83       	std	Y+7, r24	; 0x07
    2078:	98 87       	std	Y+8, r25	; 0x08
    207a:	a9 87       	std	Y+9, r26	; 0x09
    207c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <LCD_init+0x618>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	3f c0       	rjmp	.+126    	; 0x211e <LCD_init+0x696>
	else if (__tmp > 65535)
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <LCD_init+0x682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    20bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20be:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_init+0x678>
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_init+0x666>
    20f2:	9c 83       	std	Y+4, r25	; 0x04
    20f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <LCD_init+0x65a>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <LCD_init+0x6aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_init+0x6a2>
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2132:	c6 5a       	subi	r28, 0xA6	; 166
    2134:	df 4f       	sbci	r29, 0xFF	; 255
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	08 95       	ret

0000214a <LCD_WriteString>:
}

#endif

void LCD_WriteString(u8 *str)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <LCD_WriteString+0x6>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	9b 83       	std	Y+3, r25	; 0x03
    2158:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0;str[i];i++)
    215a:	19 82       	std	Y+1, r1	; 0x01
    215c:	0e c0       	rjmp	.+28     	; 0x217a <LCD_WriteString+0x30>
	{
		LCD_WriteData(str[i]);
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	fc 01       	movw	r30, r24
    216a:	e2 0f       	add	r30, r18
    216c:	f3 1f       	adc	r31, r19
    216e:	80 81       	ld	r24, Z
    2170:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>

#endif

void LCD_WriteString(u8 *str)
{
	for(u8 i = 0;str[i];i++)
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	fc 01       	movw	r30, r24
    2186:	e2 0f       	add	r30, r18
    2188:	f3 1f       	adc	r31, r19
    218a:	80 81       	ld	r24, Z
    218c:	88 23       	and	r24, r24
    218e:	39 f7       	brne	.-50     	; 0x215e <LCD_WriteString+0x14>
	{
		LCD_WriteData(str[i]);
	}
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LCD_CursorMove>:

void LCD_CursorMove(u8 row,u8 col)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <LCD_CursorMove+0x6>
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	6a 83       	std	Y+2, r22	; 0x02
	if(row==1)
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	29 f4       	brne	.+10     	; 0x21ba <LCD_CursorMove+0x1e>
	{
		LCD_WriteCommand(col+0x80);
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	80 58       	subi	r24, 0x80	; 128
    21b4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
    21b8:	07 c0       	rjmp	.+14     	; 0x21c8 <LCD_CursorMove+0x2c>
	}
	else if(row==2)
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	21 f4       	brne	.+8      	; 0x21c8 <LCD_CursorMove+0x2c>
	{
		LCD_WriteCommand(col+0x40+0x80);
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	80 54       	subi	r24, 0x40	; 64
    21c4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
	}

}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_Clear>:

void LCD_Clear(void)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(0x01);
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_WriteCommand>
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <LCD_WriteNum>:

void LCD_WriteNum(s16 num)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	a5 97       	sbiw	r28, 0x25	; 37
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	9d a3       	std	Y+37, r25	; 0x25
    21fc:	8c a3       	std	Y+36, r24	; 0x24
	u8 rem = 0;
    21fe:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0;
    2200:	1a 82       	std	Y+2, r1	; 0x02
	u16 arr[16]={0};
    2202:	80 e2       	ldi	r24, 0x20	; 32
    2204:	fe 01       	movw	r30, r28
    2206:	34 96       	adiw	r30, 0x04	; 4
    2208:	df 01       	movw	r26, r30
    220a:	98 2f       	mov	r25, r24
    220c:	1d 92       	st	X+, r1
    220e:	9a 95       	dec	r25
    2210:	e9 f7       	brne	.-6      	; 0x220c <LCD_WriteNum+0x26>
	u8 j = 0;
    2212:	19 82       	std	Y+1, r1	; 0x01
	if(num>0)
    2214:	8c a1       	ldd	r24, Y+36	; 0x24
    2216:	9d a1       	ldd	r25, Y+37	; 0x25
    2218:	18 16       	cp	r1, r24
    221a:	19 06       	cpc	r1, r25
    221c:	0c f0       	brlt	.+2      	; 0x2220 <LCD_WriteNum+0x3a>
    221e:	48 c0       	rjmp	.+144    	; 0x22b0 <LCD_WriteNum+0xca>
    2220:	27 c0       	rjmp	.+78     	; 0x2270 <LCD_WriteNum+0x8a>
	{
		while(num>0)
		{
			rem=num%10;
    2222:	8c a1       	ldd	r24, Y+36	; 0x24
    2224:	9d a1       	ldd	r25, Y+37	; 0x25
    2226:	2a e0       	ldi	r18, 0x0A	; 10
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	b9 01       	movw	r22, r18
    222c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__divmodhi4>
    2230:	8b 83       	std	Y+3, r24	; 0x03
			arr[i]=rem+'0';
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	c0 96       	adiw	r24, 0x30	; 48
    2240:	ac 01       	movw	r20, r24
    2242:	22 0f       	add	r18, r18
    2244:	33 1f       	adc	r19, r19
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	fc 01       	movw	r30, r24
    2250:	33 96       	adiw	r30, 0x03	; 3
    2252:	51 83       	std	Z+1, r21	; 0x01
    2254:	40 83       	st	Z, r20
			i++;
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	8f 5f       	subi	r24, 0xFF	; 255
    225a:	8a 83       	std	Y+2, r24	; 0x02
			num=num/10;
    225c:	8c a1       	ldd	r24, Y+36	; 0x24
    225e:	9d a1       	ldd	r25, Y+37	; 0x25
    2260:	2a e0       	ldi	r18, 0x0A	; 10
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	b9 01       	movw	r22, r18
    2266:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__divmodhi4>
    226a:	cb 01       	movw	r24, r22
    226c:	9d a3       	std	Y+37, r25	; 0x25
    226e:	8c a3       	std	Y+36, r24	; 0x24
	u8 i = 0;
	u16 arr[16]={0};
	u8 j = 0;
	if(num>0)
	{
		while(num>0)
    2270:	8c a1       	ldd	r24, Y+36	; 0x24
    2272:	9d a1       	ldd	r25, Y+37	; 0x25
    2274:	18 16       	cp	r1, r24
    2276:	19 06       	cpc	r1, r25
    2278:	a4 f2       	brlt	.-88     	; 0x2222 <LCD_WriteNum+0x3c>
			rem=num%10;
			arr[i]=rem+'0';
			i++;
			num=num/10;
		}
		for( j=i;j>0;j--)
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <LCD_WriteNum+0xc2>
		{
			LCD_WriteData(arr[j-1]);
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9c 01       	movw	r18, r24
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	ce 01       	movw	r24, r28
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	82 0f       	add	r24, r18
    2294:	93 1f       	adc	r25, r19
    2296:	fc 01       	movw	r30, r24
    2298:	33 96       	adiw	r30, 0x03	; 3
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
			rem=num%10;
			arr[i]=rem+'0';
			i++;
			num=num/10;
		}
		for( j=i;j>0;j--)
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	81 50       	subi	r24, 0x01	; 1
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	88 23       	and	r24, r24
    22ac:	49 f7       	brne	.-46     	; 0x2280 <LCD_WriteNum+0x9a>
    22ae:	56 c0       	rjmp	.+172    	; 0x235c <LCD_WriteNum+0x176>
		{
			LCD_WriteData(arr[j-1]);
		}
	}
	else if(num<0)
    22b0:	8c a1       	ldd	r24, Y+36	; 0x24
    22b2:	9d a1       	ldd	r25, Y+37	; 0x25
    22b4:	99 23       	and	r25, r25
    22b6:	0c f0       	brlt	.+2      	; 0x22ba <LCD_WriteNum+0xd4>
    22b8:	4e c0       	rjmp	.+156    	; 0x2356 <LCD_WriteNum+0x170>
	{
		LCD_WriteData('-');
    22ba:	8d e2       	ldi	r24, 0x2D	; 45
    22bc:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
    22c0:	2b c0       	rjmp	.+86     	; 0x2318 <LCD_WriteNum+0x132>
		while(num<0)
		{
			rem=num%10;
    22c2:	8c a1       	ldd	r24, Y+36	; 0x24
    22c4:	9d a1       	ldd	r25, Y+37	; 0x25
    22c6:	2a e0       	ldi	r18, 0x0A	; 10
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	b9 01       	movw	r22, r18
    22cc:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__divmodhi4>
    22d0:	8b 83       	std	Y+3, r24	; 0x03
			arr[i]=-rem+'0';
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	68 2f       	mov	r22, r24
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	80 e3       	ldi	r24, 0x30	; 48
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	82 1b       	sub	r24, r18
    22e4:	93 0b       	sbc	r25, r19
    22e6:	ac 01       	movw	r20, r24
    22e8:	9b 01       	movw	r18, r22
    22ea:	22 0f       	add	r18, r18
    22ec:	33 1f       	adc	r19, r19
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	82 0f       	add	r24, r18
    22f4:	93 1f       	adc	r25, r19
    22f6:	fc 01       	movw	r30, r24
    22f8:	33 96       	adiw	r30, 0x03	; 3
    22fa:	51 83       	std	Z+1, r21	; 0x01
    22fc:	40 83       	st	Z, r20
			i++;
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	8a 83       	std	Y+2, r24	; 0x02
			num=num/10;
    2304:	8c a1       	ldd	r24, Y+36	; 0x24
    2306:	9d a1       	ldd	r25, Y+37	; 0x25
    2308:	2a e0       	ldi	r18, 0x0A	; 10
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	b9 01       	movw	r22, r18
    230e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__divmodhi4>
    2312:	cb 01       	movw	r24, r22
    2314:	9d a3       	std	Y+37, r25	; 0x25
    2316:	8c a3       	std	Y+36, r24	; 0x24
		}
	}
	else if(num<0)
	{
		LCD_WriteData('-');
		while(num<0)
    2318:	8c a1       	ldd	r24, Y+36	; 0x24
    231a:	9d a1       	ldd	r25, Y+37	; 0x25
    231c:	99 23       	and	r25, r25
    231e:	8c f2       	brlt	.-94     	; 0x22c2 <LCD_WriteNum+0xdc>
			rem=num%10;
			arr[i]=-rem+'0';
			i++;
			num=num/10;
		}
		for( j=i;j>0;j--)
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_WriteNum+0x168>
		{
			LCD_WriteData(arr[j-1]);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9c 01       	movw	r18, r24
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	ce 01       	movw	r24, r28
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	fc 01       	movw	r30, r24
    233e:	33 96       	adiw	r30, 0x03	; 3
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
			rem=num%10;
			arr[i]=-rem+'0';
			i++;
			num=num/10;
		}
		for( j=i;j>0;j--)
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	81 50       	subi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	88 23       	and	r24, r24
    2352:	49 f7       	brne	.-46     	; 0x2326 <LCD_WriteNum+0x140>
    2354:	03 c0       	rjmp	.+6      	; 0x235c <LCD_WriteNum+0x176>
		{
			LCD_WriteData(arr[j-1]);
		}
	}
	else
		LCD_WriteData('0');
    2356:	80 e3       	ldi	r24, 0x30	; 48
    2358:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>

}
    235c:	a5 96       	adiw	r28, 0x25	; 37
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <LCD_WriteNumInBinary>:

void LCD_WriteNumInBinary(u8 num)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	a4 97       	sbiw	r28, 0x24	; 36
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	8c a3       	std	Y+36, r24	; 0x24
	u8 rem = 0;
    2384:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0;
    2386:	1a 82       	std	Y+2, r1	; 0x02
	u16 arr[16]={0};
    2388:	80 e2       	ldi	r24, 0x20	; 32
    238a:	fe 01       	movw	r30, r28
    238c:	34 96       	adiw	r30, 0x04	; 4
    238e:	df 01       	movw	r26, r30
    2390:	98 2f       	mov	r25, r24
    2392:	1d 92       	st	X+, r1
    2394:	9a 95       	dec	r25
    2396:	e9 f7       	brne	.-6      	; 0x2392 <LCD_WriteNumInBinary+0x24>
	u8 j = 0;
    2398:	19 82       	std	Y+1, r1	; 0x01

	if(num>0)
    239a:	8c a1       	ldd	r24, Y+36	; 0x24
    239c:	88 23       	and	r24, r24
    239e:	c9 f1       	breq	.+114    	; 0x2412 <LCD_WriteNumInBinary+0xa4>
    23a0:	1b c0       	rjmp	.+54     	; 0x23d8 <LCD_WriteNumInBinary+0x6a>
	{
		while(num>0)
		{
			rem=num%2;
    23a2:	8c a1       	ldd	r24, Y+36	; 0x24
    23a4:	81 70       	andi	r24, 0x01	; 1
    23a6:	8b 83       	std	Y+3, r24	; 0x03
			arr[i]=rem+'0';
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	c0 96       	adiw	r24, 0x30	; 48
    23b6:	ac 01       	movw	r20, r24
    23b8:	22 0f       	add	r18, r18
    23ba:	33 1f       	adc	r19, r19
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	82 0f       	add	r24, r18
    23c2:	93 1f       	adc	r25, r19
    23c4:	fc 01       	movw	r30, r24
    23c6:	33 96       	adiw	r30, 0x03	; 3
    23c8:	51 83       	std	Z+1, r21	; 0x01
    23ca:	40 83       	st	Z, r20
			i++;
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	8a 83       	std	Y+2, r24	; 0x02
			num=num/2;
    23d2:	8c a1       	ldd	r24, Y+36	; 0x24
    23d4:	86 95       	lsr	r24
    23d6:	8c a3       	std	Y+36, r24	; 0x24
	u16 arr[16]={0};
	u8 j = 0;

	if(num>0)
	{
		while(num>0)
    23d8:	8c a1       	ldd	r24, Y+36	; 0x24
    23da:	88 23       	and	r24, r24
    23dc:	11 f7       	brne	.-60     	; 0x23a2 <LCD_WriteNumInBinary+0x34>
			rem=num%2;
			arr[i]=rem+'0';
			i++;
			num=num/2;
		}
		for( j=i;j>0;j--)
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <LCD_WriteNumInBinary+0x9e>
		{
			LCD_WriteData(arr[j-1]);
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9c 01       	movw	r18, r24
    23ee:	22 0f       	add	r18, r18
    23f0:	33 1f       	adc	r19, r19
    23f2:	ce 01       	movw	r24, r28
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	82 0f       	add	r24, r18
    23f8:	93 1f       	adc	r25, r19
    23fa:	fc 01       	movw	r30, r24
    23fc:	33 96       	adiw	r30, 0x03	; 3
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
			rem=num%2;
			arr[i]=rem+'0';
			i++;
			num=num/2;
		}
		for( j=i;j>0;j--)
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	81 50       	subi	r24, 0x01	; 1
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	88 23       	and	r24, r24
    2410:	49 f7       	brne	.-46     	; 0x23e4 <LCD_WriteNumInBinary+0x76>
		{
			LCD_WriteData(((num>>i)&1)+'0');
		}*/
	}

}
    2412:	a4 96       	adiw	r28, 0x24	; 36
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <LCD_WriteNum_4D>:

void LCD_WriteNum_4D(u16 num)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <LCD_WriteNum_4D+0x6>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(((num%10000)/1000)+'0');
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	20 e1       	ldi	r18, 0x10	; 16
    2438:	37 e2       	ldi	r19, 0x27	; 39
    243a:	b9 01       	movw	r22, r18
    243c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    2440:	28 ee       	ldi	r18, 0xE8	; 232
    2442:	33 e0       	ldi	r19, 0x03	; 3
    2444:	b9 01       	movw	r22, r18
    2446:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    244a:	cb 01       	movw	r24, r22
    244c:	80 5d       	subi	r24, 0xD0	; 208
    244e:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
	LCD_WriteData(((num%1000)/100)+'0');
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	28 ee       	ldi	r18, 0xE8	; 232
    2458:	33 e0       	ldi	r19, 0x03	; 3
    245a:	b9 01       	movw	r22, r18
    245c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    2460:	24 e6       	ldi	r18, 0x64	; 100
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	b9 01       	movw	r22, r18
    2466:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    246a:	cb 01       	movw	r24, r22
    246c:	80 5d       	subi	r24, 0xD0	; 208
    246e:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
	LCD_WriteData(((num%100)/10)+'0');
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	24 e6       	ldi	r18, 0x64	; 100
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	b9 01       	movw	r22, r18
    247c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    2480:	2a e0       	ldi	r18, 0x0A	; 10
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	b9 01       	movw	r22, r18
    2486:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    248a:	cb 01       	movw	r24, r22
    248c:	80 5d       	subi	r24, 0xD0	; 208
    248e:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>
	LCD_WriteData(((num%10)/1)+'0');
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	2a e0       	ldi	r18, 0x0A	; 10
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	b9 01       	movw	r22, r18
    249c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodhi4>
    24a0:	80 5d       	subi	r24, 0xD0	; 208
    24a2:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_WriteData>

}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <LedOn>:
#include "LED_Cfg.h"
#include "LED.h"

#if(MODE==ActiveHigh)
void LedOn(LED_t *LedPtrConfig)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <LedOn+0x6>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
	LedPtrConfig->Level=STD_HIGH;
    24be:	e9 81       	ldd	r30, Y+1	; 0x01
    24c0:	fa 81       	ldd	r31, Y+2	; 0x02
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	81 83       	std	Z+1, r24	; 0x01
	Dio_WriteChannel(LedPtrConfig->Channel,LedPtrConfig->Level);
    24c6:	e9 81       	ldd	r30, Y+1	; 0x01
    24c8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ca:	80 81       	ld	r24, Z
    24cc:	e9 81       	ldd	r30, Y+1	; 0x01
    24ce:	fa 81       	ldd	r31, Y+2	; 0x02
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	69 2f       	mov	r22, r25
    24d4:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <LedOff>:
void LedOff(LED_t *LedPtrConfig)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <LedOff+0x6>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
	LedPtrConfig->Level=STD_LOW;
    24f0:	e9 81       	ldd	r30, Y+1	; 0x01
    24f2:	fa 81       	ldd	r31, Y+2	; 0x02
    24f4:	11 82       	std	Z+1, r1	; 0x01
	Dio_WriteChannel(LedPtrConfig->Channel,LedPtrConfig->Level);
    24f6:	e9 81       	ldd	r30, Y+1	; 0x01
    24f8:	fa 81       	ldd	r31, Y+2	; 0x02
    24fa:	80 81       	ld	r24, Z
    24fc:	e9 81       	ldd	r30, Y+1	; 0x01
    24fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	69 2f       	mov	r22, r25
    2504:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>

}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <LedToggle>:

}
#endif

void LedToggle(LED_t *LedPtrConfig)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <LedToggle+0x6>
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
	//LedPtrConfig->Level=STD_HIGH;
	LedPtrConfig->Level=Dio_FlipChannel(LedPtrConfig->Channel);
    2520:	e9 81       	ldd	r30, Y+1	; 0x01
    2522:	fa 81       	ldd	r31, Y+2	; 0x02
    2524:	80 81       	ld	r24, Z
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <Dio_FlipChannel>
    252e:	e9 81       	ldd	r30, Y+1	; 0x01
    2530:	fa 81       	ldd	r31, Y+2	; 0x02
    2532:	81 83       	std	Z+1, r24	; 0x01
}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <SevenSegmentON>:


static const char arr [10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

void SevenSegmentON (SevenSegment_t *SevenSegmentPtrConfig)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <SevenSegmentON+0x6>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
	SevenSegmentPtrConfig->Channel=SevenSegmentCathodEnable;
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	8a e0       	ldi	r24, 0x0A	; 10
    2552:	80 83       	st	Z, r24
	SevenSegmentPtrConfig->Level=STD_HIGH;
    2554:	e9 81       	ldd	r30, Y+1	; 0x01
    2556:	fa 81       	ldd	r31, Y+2	; 0x02
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	83 83       	std	Z+3, r24	; 0x03
	Dio_WriteChannel(SevenSegmentPtrConfig->Channel,SevenSegmentPtrConfig->Level);
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	80 81       	ld	r24, Z
    2562:	e9 81       	ldd	r30, Y+1	; 0x01
    2564:	fa 81       	ldd	r31, Y+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	69 2f       	mov	r22, r25
    256a:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <SevenSegmentOFF>:
void SevenSegmentOFF  (SevenSegment_t *SevenSegmentPtrConfig)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <SevenSegmentOFF+0x6>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
	SevenSegmentPtrConfig->Channel=SevenSegmentCathodEnable;
    2586:	e9 81       	ldd	r30, Y+1	; 0x01
    2588:	fa 81       	ldd	r31, Y+2	; 0x02
    258a:	8a e0       	ldi	r24, 0x0A	; 10
    258c:	80 83       	st	Z, r24
	SevenSegmentPtrConfig->Level=STD_LOW;
    258e:	e9 81       	ldd	r30, Y+1	; 0x01
    2590:	fa 81       	ldd	r31, Y+2	; 0x02
    2592:	13 82       	std	Z+3, r1	; 0x03
	Dio_WriteChannel(SevenSegmentPtrConfig->Channel,SevenSegmentPtrConfig->Level);
    2594:	e9 81       	ldd	r30, Y+1	; 0x01
    2596:	fa 81       	ldd	r31, Y+2	; 0x02
    2598:	80 81       	ld	r24, Z
    259a:	e9 81       	ldd	r30, Y+1	; 0x01
    259c:	fa 81       	ldd	r31, Y+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	69 2f       	mov	r22, r25
    25a2:	0e 94 00 07 	call	0xe00	; 0xe00 <Dio_WriteChannel>

}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <SevenSegmentDisplay>:
void SevenSegmentDisplay(SevenSegment_t *SevenSegmentPtrConfig)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <SevenSegmentDisplay+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
	Dio_WritePort(SevenSegmentPtrConfig->port,arr[SevenSegmentPtrConfig->Index]);
    25be:	e9 81       	ldd	r30, Y+1	; 0x01
    25c0:	fa 81       	ldd	r31, Y+2	; 0x02
    25c2:	21 81       	ldd	r18, Z+1	; 0x01
    25c4:	e9 81       	ldd	r30, Y+1	; 0x01
    25c6:	fa 81       	ldd	r31, Y+2	; 0x02
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	fc 01       	movw	r30, r24
    25d0:	e8 55       	subi	r30, 0x58	; 88
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	90 81       	ld	r25, Z
    25d6:	82 2f       	mov	r24, r18
    25d8:	69 2f       	mov	r22, r25
    25da:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Dio_WritePort>
	SevenSegmentPtrConfig->Index++;
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	e9 81       	ldd	r30, Y+1	; 0x01
    25e8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ea:	82 83       	std	Z+2, r24	; 0x02
	if(SevenSegmentPtrConfig->Index==10)
    25ec:	e9 81       	ldd	r30, Y+1	; 0x01
    25ee:	fa 81       	ldd	r31, Y+2	; 0x02
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	8a 30       	cpi	r24, 0x0A	; 10
    25f4:	19 f4       	brne	.+6      	; 0x25fc <SevenSegmentDisplay+0x4c>
	{
		SevenSegmentPtrConfig->Index=0;
    25f6:	e9 81       	ldd	r30, Y+1	; 0x01
    25f8:	fa 81       	ldd	r31, Y+2	; 0x02
    25fa:	12 82       	std	Z+2, r1	; 0x02
	}

}
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <SwitchStatus>:
#include "Switch_Cfg.h"
#include "Std_Types.h"

#if(Mode==Pullup)
Std_ReturnType SwitchStatus(Switch_t *SwtichPtrConfig)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <SwitchStatus+0x6>
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	9b 83       	std	Y+3, r25	; 0x03
    2614:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Return;
	SwtichPtrConfig->Level=Dio_ReadChannel(SwtichPtrConfig->Channel);
    2616:	ea 81       	ldd	r30, Y+2	; 0x02
    2618:	fb 81       	ldd	r31, Y+3	; 0x03
    261a:	80 81       	ld	r24, Z
    261c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <Dio_ReadChannel>
    2620:	ea 81       	ldd	r30, Y+2	; 0x02
    2622:	fb 81       	ldd	r31, Y+3	; 0x03
    2624:	81 83       	std	Z+1, r24	; 0x01
	if(SwtichPtrConfig->Level)
    2626:	ea 81       	ldd	r30, Y+2	; 0x02
    2628:	fb 81       	ldd	r31, Y+3	; 0x03
    262a:	81 81       	ldd	r24, Z+1	; 0x01
    262c:	88 23       	and	r24, r24
    262e:	19 f0       	breq	.+6      	; 0x2636 <SwitchStatus+0x30>
	{
		Return = STD_HIGH;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	01 c0       	rjmp	.+2      	; 0x2638 <SwitchStatus+0x32>
	}
	else
	{
		Return = STD_LOW;
    2636:	19 82       	std	Y+1, r1	; 0x01
	}

	return Return;
    2638:	89 81       	ldd	r24, Y+1	; 0x01
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <main>:
#include "SevenSegment.h"
#include "SevenSegment_Cfg.h"
#include "Switch.h"
#include "Switch_Cfg.h"
int main(void)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	65 97       	sbiw	r28, 0x15	; 21
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
	Dio_Init();
    265a:	0e 94 10 0b 	call	0x1620	; 0x1620 <Dio_Init>
	LED_t LED={LED_1};
    265e:	1a 8a       	std	Y+18, r1	; 0x12
    2660:	19 8a       	std	Y+17, r1	; 0x11
    2662:	88 e0       	ldi	r24, 0x08	; 8
    2664:	89 8b       	std	Y+17, r24	; 0x11
	LedOn(&LED);
    2666:	ce 01       	movw	r24, r28
    2668:	41 96       	adiw	r24, 0x11	; 17
    266a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LedOn>
	SevenSegment_t *SevenSegment;
	SevenSegment->Index=0;
    266e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2670:	f8 89       	ldd	r31, Y+16	; 0x10
    2672:	12 82       	std	Z+2, r1	; 0x02
	SevenSegmentON (SevenSegment);
    2674:	8f 85       	ldd	r24, Y+15	; 0x0f
    2676:	98 89       	ldd	r25, Y+16	; 0x10
    2678:	0e 94 9f 12 	call	0x253e	; 0x253e <SevenSegmentON>
	Switch_t Switch={Switch_1};
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	fe 01       	movw	r30, r28
    2680:	73 96       	adiw	r30, 0x13	; 19
    2682:	df 01       	movw	r26, r30
    2684:	98 2f       	mov	r25, r24
    2686:	1d 92       	st	X+, r1
    2688:	9a 95       	dec	r25
    268a:	e9 f7       	brne	.-6      	; 0x2686 <main+0x40>
    268c:	89 e0       	ldi	r24, 0x09	; 9
    268e:	8b 8b       	std	Y+19, r24	; 0x13
	while(1)
	{

		if(SwitchStatus(&Switch))
    2690:	ce 01       	movw	r24, r28
    2692:	43 96       	adiw	r24, 0x13	; 19
    2694:	0e 94 03 13 	call	0x2606	; 0x2606 <SwitchStatus>
    2698:	88 23       	and	r24, r24
    269a:	d1 f3       	breq	.-12     	; 0x2690 <main+0x4a>
		{
			SevenSegmentDisplay(SevenSegment);
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	98 89       	ldd	r25, Y+16	; 0x10
    26a0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SevenSegmentDisplay>
			LedToggle(&LED);
    26a4:	ce 01       	movw	r24, r28
    26a6:	41 96       	adiw	r24, 0x11	; 17
    26a8:	0e 94 89 12 	call	0x2512	; 0x2512 <LedToggle>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	aa ef       	ldi	r26, 0xFA	; 250
    26b2:	b3 e4       	ldi	r27, 0x43	; 67
    26b4:	8b 87       	std	Y+11, r24	; 0x0b
    26b6:	9c 87       	std	Y+12, r25	; 0x0c
    26b8:	ad 87       	std	Y+13, r26	; 0x0d
    26ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a ef       	ldi	r20, 0xFA	; 250
    26ca:	54 e4       	ldi	r21, 0x44	; 68
    26cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8f 83       	std	Y+7, r24	; 0x07
    26d6:	98 87       	std	Y+8, r25	; 0x08
    26d8:	a9 87       	std	Y+9, r26	; 0x09
    26da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <main+0xb8>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <main+0x136>
	else if (__tmp > 65535)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	0f c0       	rjmp	.+30     	; 0x275e <main+0x118>
    2740:	88 ec       	ldi	r24, 0xC8	; 200
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <main+0x106>
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9e 83       	std	Y+6, r25	; 0x06
    275c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <main+0xfa>
    2766:	94 cf       	rjmp	.-216    	; 0x2690 <main+0x4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <main+0x142>
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	7f cf       	rjmp	.-258    	; 0x2690 <main+0x4a>

00002792 <__udivmodhi4>:
    2792:	aa 1b       	sub	r26, r26
    2794:	bb 1b       	sub	r27, r27
    2796:	51 e1       	ldi	r21, 0x11	; 17
    2798:	07 c0       	rjmp	.+14     	; 0x27a8 <__udivmodhi4_ep>

0000279a <__udivmodhi4_loop>:
    279a:	aa 1f       	adc	r26, r26
    279c:	bb 1f       	adc	r27, r27
    279e:	a6 17       	cp	r26, r22
    27a0:	b7 07       	cpc	r27, r23
    27a2:	10 f0       	brcs	.+4      	; 0x27a8 <__udivmodhi4_ep>
    27a4:	a6 1b       	sub	r26, r22
    27a6:	b7 0b       	sbc	r27, r23

000027a8 <__udivmodhi4_ep>:
    27a8:	88 1f       	adc	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	5a 95       	dec	r21
    27ae:	a9 f7       	brne	.-22     	; 0x279a <__udivmodhi4_loop>
    27b0:	80 95       	com	r24
    27b2:	90 95       	com	r25
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	08 95       	ret

000027ba <__divmodhi4>:
    27ba:	97 fb       	bst	r25, 7
    27bc:	09 2e       	mov	r0, r25
    27be:	07 26       	eor	r0, r23
    27c0:	0a d0       	rcall	.+20     	; 0x27d6 <__divmodhi4_neg1>
    27c2:	77 fd       	sbrc	r23, 7
    27c4:	04 d0       	rcall	.+8      	; 0x27ce <__divmodhi4_neg2>
    27c6:	e5 df       	rcall	.-54     	; 0x2792 <__udivmodhi4>
    27c8:	06 d0       	rcall	.+12     	; 0x27d6 <__divmodhi4_neg1>
    27ca:	00 20       	and	r0, r0
    27cc:	1a f4       	brpl	.+6      	; 0x27d4 <__divmodhi4_exit>

000027ce <__divmodhi4_neg2>:
    27ce:	70 95       	com	r23
    27d0:	61 95       	neg	r22
    27d2:	7f 4f       	sbci	r23, 0xFF	; 255

000027d4 <__divmodhi4_exit>:
    27d4:	08 95       	ret

000027d6 <__divmodhi4_neg1>:
    27d6:	f6 f7       	brtc	.-4      	; 0x27d4 <__divmodhi4_exit>
    27d8:	90 95       	com	r25
    27da:	81 95       	neg	r24
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	08 95       	ret

000027e0 <__prologue_saves__>:
    27e0:	2f 92       	push	r2
    27e2:	3f 92       	push	r3
    27e4:	4f 92       	push	r4
    27e6:	5f 92       	push	r5
    27e8:	6f 92       	push	r6
    27ea:	7f 92       	push	r7
    27ec:	8f 92       	push	r8
    27ee:	9f 92       	push	r9
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	ca 1b       	sub	r28, r26
    280a:	db 0b       	sbc	r29, r27
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	09 94       	ijmp

00002818 <__epilogue_restores__>:
    2818:	2a 88       	ldd	r2, Y+18	; 0x12
    281a:	39 88       	ldd	r3, Y+17	; 0x11
    281c:	48 88       	ldd	r4, Y+16	; 0x10
    281e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2820:	6e 84       	ldd	r6, Y+14	; 0x0e
    2822:	7d 84       	ldd	r7, Y+13	; 0x0d
    2824:	8c 84       	ldd	r8, Y+12	; 0x0c
    2826:	9b 84       	ldd	r9, Y+11	; 0x0b
    2828:	aa 84       	ldd	r10, Y+10	; 0x0a
    282a:	b9 84       	ldd	r11, Y+9	; 0x09
    282c:	c8 84       	ldd	r12, Y+8	; 0x08
    282e:	df 80       	ldd	r13, Y+7	; 0x07
    2830:	ee 80       	ldd	r14, Y+6	; 0x06
    2832:	fd 80       	ldd	r15, Y+5	; 0x05
    2834:	0c 81       	ldd	r16, Y+4	; 0x04
    2836:	1b 81       	ldd	r17, Y+3	; 0x03
    2838:	aa 81       	ldd	r26, Y+2	; 0x02
    283a:	b9 81       	ldd	r27, Y+1	; 0x01
    283c:	ce 0f       	add	r28, r30
    283e:	d1 1d       	adc	r29, r1
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	ed 01       	movw	r28, r26
    284c:	08 95       	ret

0000284e <_exit>:
    284e:	f8 94       	cli

00002850 <__stop_program>:
    2850:	ff cf       	rjmp	.-2      	; 0x2850 <__stop_program>
